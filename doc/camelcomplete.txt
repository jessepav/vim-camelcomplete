*camelcomplete.txt* Plugin for CamelCase, snake_case, and dash-words completion.

Author:  Jesse Pavel <jpavel@gmail.com>
License: MIT

=============================================================================

  1. INTRODUCTION				|camelcomplete|
  2. CONFIGURATION				|camelcomplete-configuration|
  3. REFERENCE					|camelcomplete-reference|
  4. NOTES					|camelcomplete-notes|

=============================================================================

INTRODUCTION				    *camelcomplete* *CamelComplete*

This plugin provides an insert-mode completion function that allows you to
expand `CamelCase`, `snake_case`, and (if appropriate for the filetype) `dash-words`
abbreviations into their full identifiers. For instance,

  Identifier		Abbreviation ~
  setForwardMark	`sFM`
  open_last_file	`olf`
  channel34Types	`c3T`
  margin-top		`mt`

As an example (with * representing the cursor position),
>
  obj.sFM* --> (invoke camelcomplete) --> obj.setForwardMark*
<
Note: for performance, this plugin is written in `vim9script` using the
`matchbufline()` and `matchstrlist()` functions introduced in Vim `v9.1.0009`,
and thus you'll need a sufficiently new version of Vim to use it.

=============================================================================

CONFIGURATION				    *camelcomplete-configuration*

Once `camelcomplete` is installed (see README.md for details), you'll have a
few new commands and a completion function (see |complete-functions|) to use.

Quick Start:

In your `.vimrc`, add these lines
>
  CamelCompleteInstall
  inoremap <C-X><C-A>    <Cmd>CamelCompleteRefreshBuffers 3<CR><C-X><C-U>
<
This will set 'completefunc' to a script-local completion function in
`camelcomplete.vim`, and set up <C-X><C-A> to scan all listed buffers and
complete the abbreviation before the cursor. You can, of course, use any {lhs}
mapping you'd like. I prefer <M-/>, since it's only one keystroke, but some
terminals won't register <M-/> properly.

Two global variables control how abbreviation matching is performed:
>
  let g:camelcomplete_casefold = 1
<
to have abbreviation matching be case insensitive. In this case, both `sfm`
and `sFM` could be used to yield `setForwardMark`.
>
  let g:camelcomplete_prefix_match = 1
<
will scan through all abbreviations to find those that start with the
abbreviation before the cursor. So for instance, if you have both
`setForwardMark` and `setFastMachine` identifiers, and you attempt to complete
`sF`, you'll be shown a popup to choose between the two identifiers. Without
prefix matching, you'd have to use the whole abbreviation, `sFM`.

Both of these options represent a tradeoff between the ease of typing
abbreviations and having a reasonable number of candidates in the completion
popup.

=============================================================================

3. REFERENCE					   *camelcomplete-reference*

For finer-grained control over symbol scanning, you can choose among these
three modes to use as an argument to the `CamelCompleteRefreshBuffers`
command (the '3' in the Quick Start section).

  1    Refresh only the current buffer
  2    Refresh visible buffers
  3    Refresh all listed buffers

After a refresh has been performed, completion can be invoked using the
standard <C-X><C-U> "user-defined completion" sequence.

So if you wanted to make a mapping that would scan only the current buffer and
perform completion, you could for instance use

  inoremap <C-X><C-B> <Cmd>CamelCompleteRefreshBuffers 1<CR><C-X><C-U>

`CamelCompleteRefreshBuffers` can take an optional second parameter that
restricts the search for identifiers in the current buffer to a given number
of lines around the cursor. For example, if you want to refresh identifiers
only in the 100 lines before and after the cursor, you could create a mapping

  inoremap <C-X><C-B> <Cmd>CamelCompleteRefreshBuffers 1 100<CR><C-X><C-U>

This is useful if you frequently refresh-and-complete in the current buffer,
and the buffer is large.

`CamelCompleteInstall`				    *camelcomplete-install*

This command simply sets 'completefunc' to the script-local `CamelComplete`
function. It exists only because `CamelComplete()` is not globally visible.

`CamelCompleteExportFunc`			*camelcomplete-export-func*

If you don't want to use camelcomplete directly as the 'completefunc', you can
assign its completion function (see |complete-functions|) to a global variable
by running the command

  CamelCompleteExportFunc <name>

Note that `<name>` must start with a capital letter, or you'll get an error.

=============================================================================

NOTES						   *camelcomplete-notes*

Fast Buffer Scans ~

  The plugin keeps track of when each buffer changes (using `b:changedtick`)
  and so it won't re-parse buffers which haven't changed since its last scan.
  Thus, even when running 'CamelCompleteRefreshBuffers 3' , which nominally
  refresh all listed buffers, the command will run quickly since unmodified
  buffers are skipped.

Candidate Ordering ~

  Even if the abbreviation-identifier index contains entries from all buffers,
  camelcomplete will put identifiers from the current buffer at the top of the
  completion popup.

=============================================================================
 vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
