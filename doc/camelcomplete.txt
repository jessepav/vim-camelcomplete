*camelcomplete.txt* Plugin for CamelCase and snake_case completion.

Author:  Jesse Pavel <jpavel@gmail.com>
License: MIT

=============================================================================

  1. INTRODUCTION				|camelcomplete|
  2. CONFIGURATION				|camelcomplete-configuration|
  3. REFERENCE					|camelcomplete-reference|
  4. NOTES					|camelcomplete-notes|

=============================================================================

INTRODUCTION				    *camelcomplete* *CamelComplete*

This plugin provides an insert-mode completion function that allows you to
expand `CamelCase`, `snake_case`, and (if appropriate for the filetype) `dash-words`
abbreviations into their full identifiers.  For instance,

  Identifier		Abbreviation ~
  setForwardMark	`sFM`
  open_last_file	`olf`
  channel34Types	`c3T`
  margin-top		`mt`

As an example (with * representing the cursor position),
>
  obj.sFM* --> (invoke camelcomplete) --> obj.setForwardMark*
<
Note: for performance, this plugin is written in `vim9script` so you'll need
Vim 9 (or perhaps a late 8.2 would work as well, though I haven't tested it).

=============================================================================

CONFIGURATION				    *camelcomplete-configuration*

Once `camelcomplete` is installed (see README.md for details), you'll have a
number of new <Plug> mappings to use as the {rhs} of your own `imap`.

Quick Start:

In your `.vimrc`, add these lines
>
  CamelCompleteInstall
  imap <C-X><C-A>    <Plug>CamelCompleteRefreshAndComplete
<
This will set 'completefunc' to a script-local completion function in
`camelcomplete.vim`, and set up <C-X><C-A> to scan all listed buffers and
complete the abbreviation before the cursor. You can, of course, use any {lhs}
mapping you'd like. I prefer <M-/>, since it's only one keystroke, but some
terminals won't register <M-/> properly.

Two global variables control how abbreviation matching is performed:
>
  let g:camelcomplete_casefold = 1
<
to have abbreviation matching be case insensitive. In this case, both `sfm`
and `sFM` could be used to yield `setForwardMark`.
>
  let g:camelcomplete_prefix_match = 1
<
will scan through all abbreviations to find those that start with the
abbreviation before the cursor. So for instance, if you have both
`setForwardMark` and `setFastMachine` identifiers, and you attempt to complete
`sF`, you'll be shown a popup to choose between the two identifiers. Without
prefix matching, you'd have to use the whole abbreviation, `sFM`.

Both of these options represent a tradeoff between the ease of typing
abbreviations and having a reasonable number of candidates in the completion
popup.

=============================================================================

3. REFERENCE					   *camelcomplete-reference*

For finer-grained control over symbol scanning, you can choose among these
three <Plug> mappings:

  <Plug>CamelCompleteRefreshCurrentBuffer
  <Plug>CamelCompleteRefreshVisibleBuffers
  <Plug>CamelCompleteRefreshAllBuffers

They work in both insert and normal mode, and will refresh camelcomplete's
internal abbreviation-symbol index for the current buffer, visible buffers,
and all listed buffers, respectively. And then completion can be invoked using
the standard <C-X><C-U> "user-defined completion" sequence.

So if you wanted to make a mapping that would scan only the current buffer and
perform completion, you could for instance use

  imap <C-X><C-B> <Plug>CamelCompleteRefreshCurrentBuffer<C-X><C-U>


`CamelCompleteInstall`				    *CamelCompleteInstall*

This command simply sets 'completefunc' to the script-local `CamelComplete`
function. It exists only because `CamelComplete()` is not globally visible.

=============================================================================

NOTES						   *camelcomplete-notes*

Fast Buffer Scans ~

  The plugin keeps track of when each buffer changes (using `b:changedtick`)
  and so it won't re-parse buffers which haven't changed since its last scan.
  Thus, even when using a mapping like '<Plug>CamelCompleteRefreshAllBuffers'
  or '<Plug>CamelCompleteRefreshAndComplete', which nominally refresh all
  listed buffers, the command will run quickly since unmodified buffers are
  skipped.

  If, however, you're editing a very large buffer (in which case it will be
  scanned every time), you can use <C-X><C-U> to complete instantly most of
  the time, and your `CamelCompleteRefresh` mapping only when you need the
  plugin to discover new identifiers.

Candidate Ordering ~

  Even if the abbreviation-identifier index contains entries from all buffers,
  camelcomplete will put identifiers from the current buffer at the top of the
  completion popup. 
  
=============================================================================
 vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
